// gen_inv_inc
////////////////////////////////////////////////////////////////////////////////
// Created By: Genisys / Guile
// Created On: 11/04/2016
////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2016 All Rights Reserved
////////////////////////////////////////////////////////////////////////////////
/*
   This include can be used in any script, it works as is!
*/
////////////////////////////////////////////////////////////////////////////////
// Required Includes
#include "gen_colors_inc"

// Counts all of the items the PC has equipped (Except the Skin/Hide)
int CountItemsWorn(object oPC);

// This function will return IF the PC Has an item & How many they have...
// NOTE: 0 = None (FALSE) otherwise the int can be 1 to X (e.g. 25 etc)
// This also counts the total items worn as well!
int GetItemCount(object oTarget, string sResRef);

// Returns how many items the Target possesses (NOT including equipped items)
// This does NOT include stack size count
int GetInventoryCount(object oTarget);

// Returns the number of all items in the Targets inventory, including equipped
// This DOES include stack size count (This only works on Creatures!)
int GetFullInventoryCount(object oCreature);

// Counts all items in inventory (This only work son Creatures!)
// This includes Equippeditems, but NOT the Stacksize of items.
int CountItemsInInventory(object oCreature);

// Returns how many items oPC possesses by sTag. (Including Equipped!)
// NOTE: This does NOT count stacksize!
int CountItemByTag(object oPC, string sTag);

// Returns how many items oPC possesses by sResRef. (Including Equipped!
// NOTE: This does NOT count stacksize!
int CountItemByResRef(object oPC, string sResRef);

// Returns how many items the PC Possesses by sTagName (Including stack count)
int GetFullItemCountByTag(object oPC, string sTagName);

// Returns how many items the PC Possesses by sResRef (Including stack count)
int GetFullItemCountByResRef(object oPC, string sResRef);

// IF nAmount = 0 it will take all equipped items worn by sTag (TagName)
// This will return how many of nItems are Equipped after taking nAmount
// NOTE: This removes from stack size as well!
int TakeItemEquippedByTag(object oPC, string sTag, int nAmount = 1);

// IF nAmount = 0 it will take all equipped items worn by sResRef
// This will return how many of nItems are Equipped after taking nAmount
// NOTE: This removes from stack size as well!
int TakeItemEquippedByResRef(object oPC, string sResRef, int nAmount = 1);

// Take Item with the tagname sTag from oPC
// NOTE: If nAmount = 0, all items with sTag will be taken (NOT Worn Items!)
// If nAmount > 0 that number of items will be taken from the PC..
int TakeItemByTag(object oObject, string sTag, int nAmount = 1);

// Take Item from oPC with the ResRef sResRef.
// NOTE: If nAmount = 0, all items with sResRef will be taken (NOT Worn Items!)
// if nAmount > 0 that number of items will be taken instead.
int TakeItemByResRef(object oObject, string sResRef, int nAmount = 1);

// Returns TRUE if the weapon is a two handed weapon...
int GetIsWeaponTwoHanded(object oPC, object oItem);

// Returns >0 (TRUE) counting how many instance of oItem by sTagName Equipped
// Returns 0 (FALSE) if the item is NOT equipped
int GetIsEquippedByTag(object oPC, string sTag);

// Returns >0 (TRUE) counting how many instance of oItem by sResRef Equipped
// Returns 0 (FALSE) if the item is NOT equipped
// NOTE: This function uses the ResRef of item NOT The TagName!
int GetIsEquippedByResRef(object oPC, string sResRef);

// Returns TRUE if the oObject has an Item by sTag (TagName)
int GetHasItemByTag(object oObject, string sTag);

// Returns TRUE if the PC has an item by sResRef
int GetHasItemByResRef(object oObject, string sResRef);

// Returns what Level the Item is exactly...
int GetItemLevel(object oItem);

// Returns what level an item is based upon it's GP Value...
int GetLevelOfItem(int nGPV);

// Get the Identified Value of oItem
int GetIdentifiedGPValue(object oItem);

// Returns information about the PC's inventory as a string..
string GetInventoryInfo(object oPC);

// Give an Item ONLY if the PC does NOT have it already...
object GiveItemOnce(object oPC, string sResRef);

//--------------------------------------------------------------
// Declare All Prototypes...

// This allows you use a delay to give an items by sResRef
// If you want to give an item instantly just use oTarget & sResRef
// NOTE: nMany is how many items with nStackSize to give, so you can give
// X items of nStackSize (if nStackSize is set to greater than 1)
void CreateItemOnTarget(object oTarget, string sResRef, int nMany = 1, int nStackSize = 1, float fDelay = 0.0, string sNewTag = "");

// Sets all items in the object (if it has an inventory) to identified..
void IdentifyInventory(object oTarget);

// Assign oGiver to give all items by sItemTag in their inventory to oReciever
void GiveAllObjectsByTag(object oGiver, string sItemTag, object oReciever);

// Assign oGiver to give all items by ResRef in their inventory to oReciever
void GiveAllObjectsByResRef(object oGiver, string sResRef, object oReciever);

//Assign oToTake to take all items by sItemTag from oTarget
void TakeAllObjectsByTag(object oToTake, string sItemTag, object oTarget);

//Assign oToTake to take all items by sResRef from oTarget
void TakeAllObjectsByResRef(object oToTake, string sResRef, object oTarget);

//Destroys all items in oPlaceable's inventory (Does NOT work on creatures!)
void DestroyInventory(object oPlaceable);

//This takes ABSOLUTELY EVERY TIME (Including Skin/Hide & Gold!)
//NOTE: This works on ANY CREATURE (Including a DM!)
void KillInventory(object oTarget);

// Destroys ALL items in Target's Inventory.(NOT Gold or Equipped Items)
void TakeInventory(object oTarget, object oToHold=OBJECT_INVALID);

// Delete all items in oTarget's Inventory (Not Equipped Items)
void DeleteInventory(object oTarget);

// Delete all equipped items of oTarget (Except for Creature Skin/Hide)
void DeleteAllEquippedItems(object oTarget);

// Destroys All Items by the tagname (sTag) in oTarget's inventory. (Equipped too)
void DestroyAllItemsByTag(object oTarget, string sItemTag, float fDelay=0.0);

// Destroys All Items by the ResRef in oTarget's inventory. (Equipped too)
void DestroyAllItemsByResRef(object oTarget, string sResRef, float fDelay=0.0);

// Give oObject nMany Item(s) by sResRef...  (Used w/ DelayCommand() )
void GiveItem(object oTarget, string sResRef, int nMany = 1);

// ID all items in a players inventory
void IDAllItems(object oPC);

// Only create the item into the PC' inventory if it's unique!
// This function should be used with DelayCommand if called within a loop!
// This may prevent a TMI error (Too many instructions)
void CreateItemIfUnique(object oItem, object oPC);

// Forcea p layer to unequip an item.
void ForceUnequipItem(object oPC, object oItem, int bClearComabt = TRUE);

// Force a player to Equip an item.
void ForceEquipItem(object oPC, object oItem, int nSlot, int bClearComabt = TRUE);

////////////////////////////////////////////////////////////////////////////////
// Define All Implementations...

//------------------------------------------------------------------------------
int CountItemsWorn(object oPC) // Not including equipped skin!
{
 int i = 0;
 if(GetIsObjectValid( GetItemInSlot(INVENTORY_SLOT_ARMS, oPC)))     { i+= 1; }
 if(GetIsObjectValid(GetItemInSlot(INVENTORY_SLOT_ARROWS, oPC)))    { i+= 1; }
 if(GetIsObjectValid(GetItemInSlot(INVENTORY_SLOT_BELT, oPC)))      { i+= 1; }
 if(GetIsObjectValid(GetItemInSlot(INVENTORY_SLOT_BOLTS, oPC)))     { i+= 1; }
 if(GetIsObjectValid(GetItemInSlot(INVENTORY_SLOT_BOOTS, oPC)))     { i+= 1; }
 if(GetIsObjectValid(GetItemInSlot(INVENTORY_SLOT_BULLETS, oPC)))   { i+= 1; }
 if(GetIsObjectValid(GetItemInSlot(INVENTORY_SLOT_CHEST, oPC)))     { i+= 1; }
 if(GetIsObjectValid(GetItemInSlot(INVENTORY_SLOT_CLOAK, oPC)))     { i+= 1; }
 if(GetIsObjectValid(GetItemInSlot(INVENTORY_SLOT_HEAD, oPC)))      { i+= 1; }
 if(GetIsObjectValid(GetItemInSlot(INVENTORY_SLOT_LEFTHAND, oPC)))  { i+= 1; }
 if(GetIsObjectValid(GetItemInSlot(INVENTORY_SLOT_LEFTRING, oPC)))  { i+= 1; }
 if(GetIsObjectValid(GetItemInSlot(INVENTORY_SLOT_NECK, oPC)))      { i+= 1; }
 if(GetIsObjectValid(GetItemInSlot(INVENTORY_SLOT_RIGHTHAND, oPC))) { i+= 1; }
 if(GetIsObjectValid(GetItemInSlot(INVENTORY_SLOT_RIGHTRING, oPC))) { i+= 1; }
 return i;
}

//------------------------------------------------------------------------------
int CountItemsInInventory(object oCreature){
    int nCount = 0;
    if(GetObjectType(oCreature)==OBJECT_TYPE_CREATURE){
    if(!GetHasInventory(oCreature)) { return nCount; }
    object oInv = GetFirstItemInInventory(oCreature);
    nCount = CountItemsWorn(oCreature) ;
    nCount += GetInventoryCount(oCreature); }
    return nCount;
}

//------------------------------------------------------------------------------
int GetIsEquippedByTag(object oPC, string sTag){
    int i; int nCount = 0;
    for(i = 0; i < NUM_INVENTORY_SLOTS; i++){
        if(GetTag(GetItemInSlot(i, oPC)) == sTag)
          {  nCount += 1;  }    }
    return nCount;
}

//------------------------------------------------------------------------------
int GetIsEquippedByResRef(object oPC, string sResRef){
    int i;
    int nCount = 0;
    for(i = 0; i < NUM_INVENTORY_SLOTS; i++){
        if(GetResRef(GetItemInSlot(i, oPC)) == sResRef)
          {  nCount += 1;  }  }
    return nCount;
}

//------------------------------------------------------------------------------
int GetItemCount(object oTarget, string sResRef){
  int i = 0;
  if(!GetHasInventory(oTarget))  { return i; }
  i += GetIsEquippedByResRef(oTarget, sResRef);
  object oItem;
  oItem = GetFirstItemInInventory(oTarget);
  while(GetIsObjectValid(oItem)) {
   if(GetResRef(oItem) == sResRef){
     if(GetItemStackSize(oItem) <=1) { i += 1; }
     else
     { i+= GetItemStackSize(oItem); }   }
   oItem = GetNextItemInInventory(oTarget); }
  return i;
}

//------------------------------------------------------------------------------
int GetInventoryCount(object oTarget){
  int i = 0;
  if(!GetHasInventory(oTarget))  { return i; }
  object oItem;
  oItem = GetFirstItemInInventory(oTarget);
  while(GetIsObjectValid(oItem)) {
   i+= 1;
   oItem = GetNextItemInInventory(oTarget); }
  return i;
}
//------------------------------------------------------------------------------
int GetFullInventoryCount(object oCreature){
  int i = 0;
  int nCount = 0; object oSlot;
  if(GetObjectType(oCreature)==OBJECT_TYPE_CREATURE){
  if(!GetHasInventory(oCreature)) { return nCount; }
  for(i = 0; i < NUM_INVENTORY_SLOTS; i++) {
       if(i!=INVENTORY_SLOT_CARMOUR){
       oSlot = GetItemInSlot(i, oCreature);
       nCount += GetItemStackSize(oSlot); }  }
  nCount += GetInventoryCount(oCreature); }
 return nCount;
}

//------------------------------------------------------------------------------
int CountItemByTag(object oPC, string sTag){
    int nCount = 0;
    if(!GetHasInventory(oPC))   { return nCount; }
    nCount += GetIsEquippedByTag(oPC, sTag);
    object oItem = GetFirstItemInInventory(oPC);
    while(oItem != OBJECT_INVALID){
        if(GetTag(oItem) == sTag){ nCount++; }
        oItem = GetNextItemInInventory(oPC);}
    return nCount;
}

//------------------------------------------------------------------------------
int CountItemByResRef(object oPC, string sResRef)
{
    int nCount = 0;
    if(!GetHasInventory(oPC)){ return nCount; }
    nCount += GetIsEquippedByResRef(oPC, sResRef);
    object oItem = GetFirstItemInInventory(oPC);
    while(oItem != OBJECT_INVALID){
        if(GetResRef(oItem) == sResRef){ nCount++;}
        oItem = GetNextItemInInventory(oPC);}
    return nCount;
}

//------------------------------------------------------------------------------
int GetFullItemCountByTag(object oPC, string sTagName){
  int i = 0;
  int nCount = 0; object oSlot;
  if(!GetHasInventory(oPC)) { return nCount; }
  for(i = 0; i < NUM_INVENTORY_SLOTS; i++){
       oSlot = GetItemInSlot(i, oPC);
       if(GetTag(oSlot) == sTagName){
       nCount += GetItemStackSize(oSlot);} }
  object oItem = GetFirstItemInInventory(oPC);
  while(GetIsObjectValid(oItem)){
  if(GetTag(oItem) == sTagName)
  { nCount += GetItemStackSize(oItem); }
  oItem = GetNextItemInInventory(oPC); }
 return nCount;
}

//------------------------------------------------------------------------------
int GetFullItemCountByResRef(object oPC, string sResRef){
  int i = 0;
  int nCount = 0; object oSlot;
  if(!GetHasInventory(oPC)) { return nCount; }
  for(i = 0; i < NUM_INVENTORY_SLOTS; i++){
       oSlot = GetItemInSlot(i, oPC);
       if(GetResRef(oSlot) == sResRef){
       nCount += GetItemStackSize(oSlot);} }
  object oItem = GetFirstItemInInventory(oPC);
  while(GetIsObjectValid(oItem)){
  if(GetResRef(oItem) == sResRef)
  { nCount += GetItemStackSize(oItem); }
  oItem = GetNextItemInInventory(oPC); }
 return nCount;
}

//------------------------------------------------------------------------------
int TakeItemEquippedByTag(object oPC, string sTag, int nAmount = 1)
{
  int nCount = 0;
  int nStackSize = 0;
  int i = 0;
  object oSlot;
  if(nAmount == 0){
    for(i=0;i<NUM_INVENTORY_SLOTS;i++){
        oSlot = GetItemInSlot(i, oPC);
        if(GetTag(oSlot) == sTag)
        { DestroyObject(oSlot, 0.2f); }}}
  else {
    for(i=0;i<NUM_INVENTORY_SLOTS;i++){
        oSlot = GetItemInSlot(i, oPC);
        if(GetTag(oSlot) == sTag){
          nStackSize = GetNumStackedItems(oSlot);
          if(nStackSize > nAmount){
              SetItemStackSize(oSlot, nStackSize - nAmount);
              nCount += nAmount;
              nAmount = 0;
              break; }
          else {
             nCount += nStackSize;
             nAmount -= nStackSize;
             DestroyObject(oSlot, 0.2f);}}}}
  return nCount;
}

//------------------------------------------------------------------------------
int TakeItemEquippedByResRef(object oPC, string sResRef, int nAmount = 1)
{
 int nCount = 0;
  int nStackSize = 0;
  int i = 0;
  object oSlot;
  if(nAmount == 0){
    for(i=0;i<NUM_INVENTORY_SLOTS;i++){
        oSlot = GetItemInSlot(i, oPC);
        if(GetResRef(oSlot) == sResRef)
        { DestroyObject(oSlot, 0.2f); }}}
  else {
    for(i=0;i<NUM_INVENTORY_SLOTS;i++){
        oSlot = GetItemInSlot(i, oPC);
        if(GetResRef(oSlot) == sResRef){
          nStackSize = GetNumStackedItems(oSlot);
          if(nStackSize > nAmount){
              SetItemStackSize(oSlot, nStackSize - nAmount);
              nCount += nAmount; break; }
          else {
             nCount += nStackSize;
             nAmount -= nStackSize;
             DestroyObject(oSlot, 0.2f);}}}}
  return nCount;
}

//------------------------------------------------------------------------------
int TakeItemByTag(object oObject, string sTag, int nAmount = 1)
{
    int nStackSize = 0;
    int nCount = 0;
    if(!GetHasInventory(oObject)){ return nCount; }
    object oItem = GetFirstItemInInventory(oObject);
    if(nAmount == 0){ // Delete all.
      TakeItemEquippedByTag(oObject, sTag, 0);
        while(GetIsObjectValid(oItem)){
            if(GetTag(oItem) == sTag){
                nCount += GetNumStackedItems(oItem);
                DestroyObject(oItem, 0.2f);}
            oItem = GetNextItemInInventory(oObject);  } }
    else {
       int nTaken = TakeItemEquippedByTag(oObject, sTag, nAmount);
       nAmount = nTaken;
          while(GetIsObjectValid(oItem) && nAmount > 0) {
            if(GetTag(oItem) == sTag){
                nStackSize = GetNumStackedItems(oItem);
                if(nStackSize > nAmount) {
                    SetItemStackSize(oItem, nStackSize - nAmount);
                    nCount += nAmount;
                    nAmount = 0;
                    break;}
             else {
                    nCount += nStackSize;
                    nAmount -= nStackSize;
                    DestroyObject(oItem, 0.2f);} }
            oItem = GetNextItemInInventory(oObject); } }
    return nCount;
}


//------------------------------------------------------------------------------
int TakeItemByResRef(object oObject, string sResRef, int nAmount = 1)
{
    int nStackSize = 0;
    int nCount = 0;
    if(!GetHasInventory(oObject)){ return nCount; }
    object oItem = GetFirstItemInInventory(oObject);

    if(nAmount == 0){ // Delete all.
      TakeItemEquippedByResRef(oObject, sResRef, 0);
        while(GetIsObjectValid(oItem)){
            if(GetResRef(oItem) == sResRef){
                nCount += GetNumStackedItems(oItem);
                DestroyObject(oItem, 0.2f);
            }
            oItem = GetNextItemInInventory(oObject);
        }
    }
    else{
      int nTaken = TakeItemEquippedByResRef(oObject, sResRef, nAmount);
      nAmount = nTaken;
        while(GetIsObjectValid(oItem) && nAmount > 0){
            if(GetResRef(oItem) == sResRef){
                nStackSize = GetNumStackedItems(oItem);
                if(nStackSize > nAmount){
                    SetItemStackSize(oItem, nStackSize - nAmount);
                    nCount += nAmount;
                    nAmount = 0;
                    break;
                }
                else {
                    nCount += nStackSize;
                    nAmount -= nStackSize;
                    DestroyObject(oItem, 0.2f);
                }
            }
            oItem = GetNextItemInInventory(oObject);
        }
    }
    return nCount;
}

//------------------------------------------------------------------------------
int GetHasItemByTag(object oObject, string sTag)
{
  if(!GetHasInventory(oObject)){ return FALSE; }
  string sTagName;
  if(GetIsEquippedByTag(oObject, sTag) != 0) { return TRUE; }
  object oItem = GetFirstItemInInventory(oObject);
  while(GetIsObjectValid(oItem)){
    if(GetTag(oItem) == sTag)  { return TRUE; }
   oItem = GetNextItemInInventory(oObject); }
  return FALSE;
}

//------------------------------------------------------------------------------
int GetHasItemByResRef(object oObject, string sResRef)
{
 if(!GetHasInventory(oObject)){ return FALSE; }
 if(GetIsEquippedByResRef(oObject, sResRef) != 0) { return TRUE; }
 object oItem = GetFirstItemInInventory(oObject);
 while(GetIsObjectValid(oItem)){
   if(GetResRef(oItem) == sResRef) { return TRUE; }
   oItem = GetNextItemInInventory(oObject); }
  return FALSE;
}

//------------------------------------------------------------------------------
int GetIsWeaponTwoHanded(object oPC, object oItem){
    int nCreSize = GetCreatureSize(oPC);
    int nSize = StringToInt(Get2DAString("baseitems",
                "WeaponSize", GetBaseItemType(oItem)));
    if(nSize > nCreSize)
     {  return TRUE;  }
    return FALSE;
}
//------------------------------------------------------------------------------
int GetIdentifiedGPValue(object oItem){
 if(oItem == OBJECT_INVALID) { return 0; }
 if(GetPlotFlag(oItem) == TRUE) { SetPlotFlag(oItem, FALSE); // Turn off Plot!
  DelayCommand(0.1, SetPlotFlag(oItem, TRUE));  } // Restore it!
 if(GetStolenFlag(oItem) == TRUE) { SetStolenFlag(oItem, FALSE);
  DelayCommand(0.1, SetStolenFlag(oItem, TRUE)); }
 if(GetIdentified(oItem) != TRUE){ SetIdentified(oItem, TRUE);  // Identify the item....
  DelayCommand(0.1, SetIdentified(oItem, FALSE)); }  // Restore it...
 int iRet = GetGoldPieceValue(oItem);
 return iRet;
}
//------------------------------------------------------------------------------
int GetLevelOfItem(int nGPV){
 int nLevel = 0; int gp = nGPV;
    //Return the level..  (Increased Efficiency by breaking into groups)
    if(gp > 8199999) { nLevel = 60; }
    else if(gp > 7199999) {
     if(gp > 7999999) {nLevel = 59;}
     else if(gp>7799999) {nLevel = 58;}
     else if(gp>7599999) {nLevel = 57;}
     else if(gp>7399999) {nLevel = 56;}
     else if(gp>7199999) {nLevel = 55;} }
    else if(gp > 6199999) {
     if(gp>6999999) {nLevel = 54;}
     else if(gp>6799999) {nLevel = 53;}
     else if(gp>6599999) {nLevel = 52;}
     else if(gp>6399999) {nLevel = 51;}
     else if(gp>6199999) {nLevel = 50;} }
    else if(gp>5199999) {
     if(gp>5999999) {nLevel = 49;}
     else if(gp>5799999) {nLevel = 48;}
     else if(gp>5599999) {nLevel = 47;}
     else if(gp>5399999) {nLevel = 46;}
     else if(gp>5199999) {nLevel = 45;} }
    else if(gp>4199999) {
     if(gp>4999999) {nLevel = 44;}
     else if(gp>4799999) {nLevel = 43;}
     else if(gp>4599999) {nLevel = 42;}
     else if(gp>4399999) {nLevel = 41;}
     else if(gp>4199999) {nLevel = 40;} }
    else if(gp>3199999){
     if (gp>3999999) {nLevel = 39;}
     else if(gp>3799999) {nLevel = 38;}
     else if(gp>3599999) {nLevel = 37;}
     else if(gp>3399999) {nLevel = 36;}
     else if(gp>3199999) {nLevel = 35;} }
    else if(gp>2199999) {
     if(gp>2999999) {nLevel = 34;}
     else if(gp>2799999) {nLevel = 33;}
     else if(gp>2599999) {nLevel = 32;}
     else if(gp>2399999) {nLevel = 31;}
     else if(gp>2199999) {nLevel = 30;} }
    else if(gp>1999999) {
    if(gp>1999999) {nLevel = 29;}
     else if(gp>1799999) {nLevel = 28;}
     else if(gp>1599999) {nLevel = 27;}
     else if(gp>1399999) {nLevel = 26;}
     else if(gp>1999999) {nLevel = 25;} }
    else if(gp>129999) {
     if(gp>999999) {nLevel = 24;}
     else if(gp>749999) {nLevel = 23;}
     else if(gp>499999) {nLevel = 22;}
     else if(gp>249999) {nLevel = 21;}
     else if(gp>129999) {nLevel = 20;} }
    else if(gp>49999) {
     if(gp>109999) {nLevel = 19;}
     else if(gp>89999) {nLevel = 18;}
     else if(gp>74999) {nLevel = 17;}
     else if(gp>64000) {nLevel = 16;}
     else if(gp>49999) {nLevel = 15;} }
    else if(gp>19999) {
     if(gp>39999) {nLevel = 14;}
     else if(gp>34999) {nLevel = 13;}
     else if(gp>29999) {nLevel = 12;}
     else if(gp>24999) {nLevel = 11;}
     else if(gp>19999) {nLevel = 10;} }
    else if(gp>4999) {
     if(gp>14999) {nLevel = 9;}
     else if(gp>11999) {nLevel = 8;}
     else if(gp>8999) {nLevel = 7;}
     else if(gp>6999) {nLevel = 6;}
     else if(gp>4999) {nLevel = 5;}   }
    else if(gp>=1000) {
     if(gp>3499) {nLevel = 4;}
     else if(gp>2499) {nLevel = 3;}
     else if(gp>1499) {nLevel = 2;}
     else if(gp>=1000) {nLevel = 1;} }
    else { nLevel = 0; }
 return nLevel;
}
//------------------------------------------------------------------------------
int GetItemLevel(object oItem){
 int nLevel = 0; int gp = GetIdentifiedGPValue(oItem);
    //Return the level..  (Increased Efficiency by breaking into groups)
    if(gp > 8199999) { nLevel = 60; }
    else if(gp > 7199999) {
     if(gp > 7999999) {nLevel = 59;}
     else if(gp>7799999) {nLevel = 58;}
     else if(gp>7599999) {nLevel = 57;}
     else if(gp>7399999) {nLevel = 56;}
     else if(gp>7199999) {nLevel = 55;} }
    else if(gp > 6199999) {
     if(gp>6999999) {nLevel = 54;}
     else if(gp>6799999) {nLevel = 53;}
     else if(gp>6599999) {nLevel = 52;}
     else if(gp>6399999) {nLevel = 51;}
     else if(gp>6199999) {nLevel = 50;} }
    else if(gp>5199999) {
     if(gp>5999999) {nLevel = 49;}
     else if(gp>5799999) {nLevel = 48;}
     else if(gp>5599999) {nLevel = 47;}
     else if(gp>5399999) {nLevel = 46;}
     else if(gp>5199999) {nLevel = 45;} }
    else if(gp>4199999) {
     if(gp>4999999) {nLevel = 44;}
     else if(gp>4799999) {nLevel = 43;}
     else if(gp>4599999) {nLevel = 42;}
     else if(gp>4399999) {nLevel = 41;}
     else if(gp>4199999) {nLevel = 40;} }
    else if(gp>3199999){
     if (gp>3999999) {nLevel = 39;}
     else if(gp>3799999) {nLevel = 38;}
     else if(gp>3599999) {nLevel = 37;}
     else if(gp>3399999) {nLevel = 36;}
     else if(gp>3199999) {nLevel = 35;} }
    else if(gp>2199999) {
     if(gp>2999999) {nLevel = 34;}
     else if(gp>2799999) {nLevel = 33;}
     else if(gp>2599999) {nLevel = 32;}
     else if(gp>2399999) {nLevel = 31;}
     else if(gp>2199999) {nLevel = 30;} }
    else if(gp>1999999) {
    if(gp>1999999) {nLevel = 29;}
     else if(gp>1799999) {nLevel = 28;}
     else if(gp>1599999) {nLevel = 27;}
     else if(gp>1399999) {nLevel = 26;}
     else if(gp>1999999) {nLevel = 25;} }
    else if(gp>129999) {
     if(gp>999999) {nLevel = 24;}
     else if(gp>749999) {nLevel = 23;}
     else if(gp>499999) {nLevel = 22;}
     else if(gp>249999) {nLevel = 21;}
     else if(gp>129999) {nLevel = 20;} }
    else if(gp>49999) {
     if(gp>109999) {nLevel = 19;}
     else if(gp>89999) {nLevel = 18;}
     else if(gp>74999) {nLevel = 17;}
     else if(gp>64000) {nLevel = 16;}
     else if(gp>49999) {nLevel = 15;} }
    else if(gp>19999) {
     if(gp>39999) {nLevel = 14;}
     else if(gp>34999) {nLevel = 13;}
     else if(gp>29999) {nLevel = 12;}
     else if(gp>24999) {nLevel = 11;}
     else if(gp>19999) {nLevel = 10;} }
    else if(gp>4999) {
     if(gp>14999) {nLevel = 9;}
     else if(gp>11999) {nLevel = 8;}
     else if(gp>8999) {nLevel = 7;}
     else if(gp>6999) {nLevel = 6;}
     else if(gp>4999) {nLevel = 5;}   }
    else if(gp>=1000) {
     if(gp>3499) {nLevel = 4;}
     else if(gp>2499) {nLevel = 3;}
     else if(gp>1499) {nLevel = 2;}
     else if(gp>=1000) {nLevel = 1;} }
    else { nLevel = 0; }
 return nLevel;
}
//------------------------------------------------------------------
string GetInventoryInfo(object oPC)
{
 int i = 0;
 int gp = 0;
 object oItem;
 string sMsg, sCount, sGold;
 oItem = GetItemInSlot(INVENTORY_SLOT_ARMS, oPC);
 if(oItem != OBJECT_INVALID) { i += 1; gp += GetGoldPieceValue(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_ARROWS, oPC);
 if(oItem != OBJECT_INVALID) { i += 1; gp += GetGoldPieceValue(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_BELT, oPC);
 if(oItem != OBJECT_INVALID) { i += 1; gp += GetGoldPieceValue(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_BOLTS, oPC);
 if(oItem != OBJECT_INVALID) { i += 1; gp += GetGoldPieceValue(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_BOOTS, oPC);
 if(oItem != OBJECT_INVALID) { i += 1; gp += GetGoldPieceValue(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_BULLETS, oPC);
 if(oItem != OBJECT_INVALID) { i += 1; gp += GetGoldPieceValue(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_CHEST, oPC);
 if(oItem != OBJECT_INVALID) { i += 1; gp += GetGoldPieceValue(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_CLOAK, oPC);
 if(oItem != OBJECT_INVALID) { i += 1; gp += GetGoldPieceValue(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_HEAD, oPC);
 if(oItem != OBJECT_INVALID) { i += 1; gp += GetGoldPieceValue(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_LEFTHAND, oPC);
 if(oItem != OBJECT_INVALID) { i += 1; gp += GetGoldPieceValue(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_LEFTRING, oPC);
 if(oItem != OBJECT_INVALID) { i += 1; gp += GetGoldPieceValue(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_NECK, oPC);
 if(oItem != OBJECT_INVALID) { i += 1; gp += GetGoldPieceValue(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_RIGHTHAND, oPC);
 if(oItem != OBJECT_INVALID) { i += 1; gp += GetGoldPieceValue(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_RIGHTRING, oPC);
 if(oItem != OBJECT_INVALID) { i += 1; gp += GetGoldPieceValue(oItem); }
 oItem = GetFirstItemInInventory(oPC);
 while(GetIsObjectValid(oItem)) { i+= 1;
  gp += GetGoldPieceValue(oItem);
  oItem = GetNextItemInInventory(oPC); }
 sMsg = SetColorText(IntToString(i), 4);
 sMsg += SetColorText(" Items In Inventory.", 33);
 sMsg += "\n";
 sMsg += SetColorText("Total Inventory Value = ", 29);
 sMsg += SetColorText(IntToString(gp) + " GP.", 27);
 sMsg += "\n";
 return sMsg;
}

//------------------------------------------------------------------------------
object GiveItemOnce(object oPC, string sResRef){
    if(!GetHasInventory(oPC)){ return OBJECT_INVALID; }
    int iWear = GetIsEquippedByResRef(oPC, sResRef);
    if(iWear != 0){ return OBJECT_INVALID; }
    object oItem = GetFirstItemInInventory(oPC);
    while(oItem != OBJECT_INVALID){
        if(GetResRef(oItem) == sResRef)
          { return OBJECT_INVALID; }
        oItem = GetNextItemInInventory(oPC); }
    return CreateItemOnObject(sResRef, oPC);
}

////////////////////////////////////////////////////////////////////////////////
// Define All Prototypes

void CreateItemOnTarget(object oTarget, string sResRef, int nMany = 1,
               int nStackSize = 1, float fDelay = 0.0, string sNewTag = "")
{
 if(GetHasInventory(oTarget)){
  if(fDelay != 0.0)
  { DelayCommand(fDelay,
   CreateItemOnTarget(oTarget, sResRef, nMany, nStackSize, 0.0, sNewTag)); }
  else {
    if(nMany == 0 || nMany == 1)
     { object oNew = CreateItemOnObject(sResRef, oTarget, nStackSize, sNewTag); }
    else{ int i = 0; for(i=0;i<nMany;i++)
     { object oNew = CreateItemOnObject(sResRef, oTarget, nStackSize, sNewTag); }
}}}}

//------------------------------------------------------------------------------
void IdentifyInventory(object oTarget){
  if(GetHasInventory(oTarget)){object i = GetFirstItemInInventory(oTarget);
  while(GetIsObjectValid(i)){SetIdentified(i, TRUE);
  i = GetNextItemInInventory(oTarget);}}
}

//------------------------------------------------------------------------------
void CreateItemIfUnique(object oItem, object oPC)
{
 if(GetHasInventory(oPC)){
 int iCreate = TRUE;
 string sRef = GetResRef(oItem);
 if(GetIsEquippedByResRef(oPC, sRef) != 0) { iCreate = FALSE; }
 else if(GetHasItemByResRef(oPC, sRef)) { iCreate = FALSE; }
 if(iCreate)
 {  CreateItemOnObject(sRef, oPC, 1); } }
}

//------------------------------------------------------------------------------
void KillPCInventory(object oPC) // Including Skin!
{
 if(GetHasInventory(oPC)){
 object oItem;
 int i = 0;
 for(i=0;i<NUM_INVENTORY_SLOTS;i++){
  oItem = GetItemInSlot(i, oPC);
  DestroyObject(oItem); }
 object oMe = oPC;
 AssignCommand(oPC, TakeGoldFromCreature(GetGold(oMe), oPC, TRUE));
 oItem = GetFirstItemInInventory(oPC);
 while(GetIsObjectValid(oItem)) {
  DestroyObject(oItem);
  oItem = GetNextItemInInventory(oPC);} }
}

//------------------------------------------------------------------------------
void IDAllItems(object oPC)
{
   if(GetHasInventory(oPC)) {
    object oItem = GetFirstItemInInventory(oPC);
    while (GetIsObjectValid(oItem)){
        SetIdentified(oItem, TRUE);
        oItem = GetNextItemInInventory(oPC);  } }
}

//------------------------------------------------------------------------------
void GiveItem(object oObject, string sResRef, int nMany = 1)
{
  if(GetHasInventory(oObject)){
  CreateItemOnObject(sResRef, oObject, nMany); }
}

//------------------------------------------------------------------------------
void DestroyAllItemsByTag(object oTarget, string sItemTag, float fDelay=0.0)
{
  object oPC = oTarget;
  object oItem;
  if(!GetHasInventory(oPC)) { return; }
  int i = 0;
  for(i=0;i<NUM_INVENTORY_SLOTS;i++){
   oItem = GetItemInSlot(i, oPC);
   if(GetTag(oItem)==sItemTag)
   {DestroyObject(oItem, fDelay); } }
  oItem = GetFirstItemInInventory(oPC);
  while(GetIsObjectValid(oItem))  {
   if(GetTag(oItem) == sItemTag)
   {  DestroyObject(oItem, fDelay);   }
   oItem = GetNextItemInInventory(oPC);  }
}

//------------------------------------------------------------------------------
void DestroyAllItemsByResRef(object oTarget, string sResRef, float fDelay=0.0)
{
  object oItem;
  if(!GetHasInventory(oTarget)) { return; }
  int i = 0;
  for(i=0;i<NUM_INVENTORY_SLOTS;i++) {
   oItem = GetItemInSlot(i, oTarget);
   if(GetResRef(oItem)==sResRef)
   {DestroyObject(oItem, fDelay); }  }
  //Kill All Items In Inventory by sResRef
  oItem = GetFirstItemInInventory(oTarget);
  while(GetIsObjectValid(oItem)) {
   if(GetResRef(oItem) == sResRef)
   {  DestroyObject(oItem, fDelay);   }
   oItem = GetNextItemInInventory(oTarget);  }
}
//------------------------------------------------------------------------------
void DestroyInventory(object oPlaceable){
 object oItem = GetFirstItemInInventory(oPlaceable);
 while(GetIsObjectValid(oItem)){
     if(GetIsObjectValid(oItem)) { DestroyObject(oItem, 0.2); }
   oItem = GetNextItemInInventory(oPlaceable); }
}
//------------------------------------------------------------------------------
void KillInventory(object oTarget){
 object oTaker = oTarget;
 AssignCommand(oTaker, TakeGoldFromCreature(GetGold(oTarget), oTarget, TRUE));
 object oItem, oSlot;
 if(GetObjectType(oTarget) == OBJECT_TYPE_CREATURE) {
 int i = 0;
 for(i=0;i<NUM_INVENTORY_SLOTS;i++){
  oSlot = GetItemInSlot(i, oTarget);
  if(GetIsObjectValid(oSlot)) { DestroyObject(oSlot, 0.2); } }}
 oItem = GetFirstItemInInventory(oTarget);
 while(GetIsObjectValid(oItem)){
     if(GetIsObjectValid(oItem)) { DestroyObject(oItem, 0.2); }
   oItem = GetNextItemInInventory(oTarget); }
}

//------------------------------------------------------------------------------
// Delete all items in oTarget's Inventory (Not Equipped Items)
void DeleteInventory(object oTarget){
  object oItem = GetFirstItemInInventory(oTarget);
  while(GetIsObjectValid(oItem)){
          DestroyObject(oItem, 0.0);
   oItem = GetNextItemInInventory(oTarget); }
}

//------------------------------------------------------------------------------
// Delete all equipped items of oTarget (Except for Creature Skin/Hide)
void DeleteAllEquippedItems(object oTarget)
{
 object oItem;
 oItem = GetItemInSlot(INVENTORY_SLOT_ARMS, oTarget);
 if(oItem != OBJECT_INVALID) { DestroyObject(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_ARROWS, oTarget);
 if(oItem != OBJECT_INVALID) { DestroyObject(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_BELT, oTarget);
 if(oItem != OBJECT_INVALID) { DestroyObject(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_BOLTS, oTarget);
 if(oItem != OBJECT_INVALID) { DestroyObject(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_BOOTS, oTarget);
 if(oItem != OBJECT_INVALID) { DestroyObject(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_BULLETS, oTarget);
 if(oItem != OBJECT_INVALID) { DestroyObject(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_CHEST, oTarget);
 if(oItem != OBJECT_INVALID) { DestroyObject(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_CLOAK, oTarget);
 if(oItem != OBJECT_INVALID) { DestroyObject(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_HEAD, oTarget);
 if(oItem != OBJECT_INVALID) { DestroyObject(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_LEFTHAND, oTarget);
 if(oItem != OBJECT_INVALID) { DestroyObject(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_LEFTRING, oTarget);
 if(oItem != OBJECT_INVALID) { DestroyObject(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_NECK, oTarget);
 if(oItem != OBJECT_INVALID) { DestroyObject(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_RIGHTHAND, oTarget);
 if(oItem != OBJECT_INVALID) { DestroyObject(oItem); }
 oItem = GetItemInSlot(INVENTORY_SLOT_RIGHTRING, oTarget);
 if(oItem != OBJECT_INVALID) { DestroyObject(oItem); }
}

//------------------------------------------------------------------------------
void TakeInventory(object oTarget, object oToHold=OBJECT_INVALID)
{
  if(!GetHasInventory(oTarget)) { return; }
  object oItem = GetFirstItemInInventory(oTarget);
  while(GetIsObjectValid(oItem)){
   if(oToHold != OBJECT_INVALID && GetHasInventory(oToHold))
   { AssignCommand(oToHold, ActionTakeItem(oItem, oTarget)); }
   else {  DestroyObject(oItem, 0.0);   }
   oItem = GetNextItemInInventory(oTarget);
  }
}

//------------------------------------------------------------------------------
void TakeAllObjectsByTag(object oToTake, string sItemTag, object oTarget)
{
  //Prevent the game from crashing
  if(!GetHasInventory(oTarget) || !GetHasInventory(oToTake) ||
     !GetIsObjectValid(oToTake) || !GetIsObjectValid(oTarget)) { return; }
  object oItem = GetFirstItemInInventory(oTarget);
  while(GetIsObjectValid(oItem)) {
   if(GetTag(oItem) == sItemTag)
   { AssignCommand(oToTake, ActionTakeItem(oItem, oTarget));  }
   oItem = GetNextItemInInventory(oTarget); }
}

//------------------------------------------------------------------------------
void TakeAllObjectsByResRef(object oToTake, string sResRef, object oTarget)
{
  //Prevent the game from crashing
  if(!GetHasInventory(oTarget) || !GetHasInventory(oToTake) ||
     !GetIsObjectValid(oToTake) || !GetIsObjectValid(oTarget)) { return; }
  object oItem = GetFirstItemInInventory(oTarget);
  while(GetIsObjectValid(oItem))  {
   if(GetResRef(oItem) == sResRef)
   { AssignCommand(oToTake, ActionTakeItem(oItem, oTarget));  }
   oItem = GetNextItemInInventory(oTarget);  }
}

//------------------------------------------------------------------------------
void GiveAllObjectsByTag(object oGiver, string sItemTag, object oReciever)
{
  //Prevent the game from crashing
  if(!GetHasInventory(oGiver) || !GetHasInventory(oReciever) ||
     !GetIsObjectValid(oGiver) || !GetIsObjectValid(oReciever))
  { return; }
  object oItem = GetFirstItemInInventory(oGiver);
  while(GetIsObjectValid(oItem))  {
   if(GetTag(oItem) == sItemTag)
   { AssignCommand(oGiver, ActionGiveItem(oItem, oReciever));  }
   oItem = GetNextItemInInventory(oGiver);  }
}

//------------------------------------------------------------------------------
void GiveAllObjectsByResRef(object oGiver, string sResRef, object oReciever)
{
  //Prevent the game from crashing
  if(!GetHasInventory(oGiver) || !GetHasInventory(oReciever) ||
     !GetIsObjectValid(oGiver) || !GetIsObjectValid(oReciever))
  { return; }
  object oItem = GetFirstItemInInventory(oGiver);
  while(GetIsObjectValid(oItem))  {
   if(GetResRef(oItem) == sResRef)
   { AssignCommand(oGiver, ActionGiveItem(oItem, oReciever));  }
   oItem = GetNextItemInInventory(oGiver);  }
}

//------------------------------------------------------------------------------
void ForceUnequipItem(object oPC, object oItem, int bClearComabt = TRUE)
{
    ApplyEffectToObject(DURATION_TYPE_TEMPORARY,
                        EffectCutsceneImmobilize(), oPC, 0.1);
    AssignCommand(oPC, ClearAllActions(bClearComabt));
    AssignCommand(oPC, ActionUnequipItem(oItem));
    AssignCommand(oPC, ActionDoCommand(SetCommandable(TRUE)));
    AssignCommand(oPC, SetCommandable(FALSE));
}

//------------------------------------------------------------------------------
void ForceEquipItem(object oPC, object oItem, int nSlot, int bClearComabt = TRUE)
{
    ApplyEffectToObject(DURATION_TYPE_TEMPORARY,
                        EffectCutsceneImmobilize(), oPC, 0.1);
    AssignCommand(oPC, ClearAllActions(bClearComabt));
    AssignCommand(oPC, ActionEquipItem(oItem, nSlot));
    AssignCommand(oPC, ActionDoCommand(SetCommandable(TRUE)));
    AssignCommand(oPC, SetCommandable(FALSE));
}

////////////////////////////////////////////////////////////////////////////////
// End Include
