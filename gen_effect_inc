// gen_effect_inc
//////////////////////////////////////////////////////
// Created by: Genisys / Guile
// Created on: 12/22/2023
//////////////////////////////////////////////////////
// 100% Open Resources for Neverwinter Nights Only
//////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Required Includes...

////////////////////////////////////////////////////////////////////////////////
// I N T E R F A C E

// Adds the temporary eEffect to oTarget, by sTag, for fDuration
void AddTemporaryEffectByTag(effect eEffect, object oTarget, string sTag, float fDuration);

// Adds the permanent eEffect to oTarget, by sTag
void AddPermanentEffectByTag(effect eEffect, object oTarget, string sTag);

// Removes all temporary effects on oTarget by sTag
void RemoveAllTemporaryEffectsByTag(object oTarget, string sTag);

// Removes all temporary effects on oTarget by sTag
void RemoveAllPermanentEffectsByTag(object oTarget, string sTag);

// Removes ALL effects on oTarget by sTag
void RemoveAllEffectsByTag(object oTarget, string sTag);

// This changes oTarget's size (Appearance Only)
// fScale is how big or smaller you wish to make it (1.5 = +50%) (0.5 = -50%)
// NOTE: Changes are PERMANENT on PWs (Otherwise you have to export character)
void AddScaleEffect(object oTarget, float fScale = 1.5);

// This returns oTarget back to their default size
void RemoveScaleEffect(object oTarget);

////////////////////////////////////////////////////////////////////////////////
// I M P L E M E N T A T I O N

//============================================================================
void AddScaleEffect(object oTarget, float fScale = 1.5){
  SetObjectVisualTransform(oTarget, OBJECT_VISUAL_TRANSFORM_SCALE, fScale,
   OBJECT_VISUAL_TRANSFORM_LERP_NONE);
}
//============================================================================
void RemoveScaleEffect(object oTarget){
  SetObjectVisualTransform(oTarget, OBJECT_VISUAL_TRANSFORM_SCALE, 1.0,
   OBJECT_VISUAL_TRANSFORM_LERP_NONE);
}
//============================================================================
void AddTemporaryEffectByTag(effect eEffect, object oTarget, string sTag, float fDuration){
 if(GetIsObjectValid(oTarget)){
  eEffect = TagEffect(eEffect, sTag);
  if(fDuration < 0.5){ fDuration = 0.5; } // Minimum 1/2 a second!
  ApplyEffectToObject(DURATION_TYPE_TEMPORARY, eEffect, oTarget, fDuration);}
}
//============================================================================
void AddPermanentEffectByTag(effect eEffect, object oTarget, string sTag){
 if(GetIsObjectValid(oTarget)){
  eEffect = TagEffect(eEffect, sTag);
  ApplyEffectToObject(DURATION_TYPE_PERMANENT, eEffect, oTarget);  }
}
//============================================================================
void RemoveAllTemporaryEffectsByTag(object oTarget, string sTag){
  if(GetIsObjectValid(oTarget)){
   effect e = GetFirstEffect(oTarget); while(GetIsEffectValid(e)){
    if(GetEffectTag(e) == sTag && GetEffectDurationType(e) == DURATION_TYPE_TEMPORARY){
     RemoveEffect(oTarget, e); }  e = GetNextEffect(oTarget); }  }
}
//============================================================================
void RemoveAllPermanentEffectsByTag(object oTarget, string sTag){
  if(GetIsObjectValid(oTarget)){
   effect e = GetFirstEffect(oTarget); while(GetIsEffectValid(e)){
    if(GetEffectTag(e) == sTag && GetEffectDurationType(e) == DURATION_TYPE_PERMANENT){
     RemoveEffect(oTarget, e); }  e = GetNextEffect(oTarget); }  }
}
//============================================================================
void RemoveAllEffectsByTag(object oTarget, string sTag){
  if(GetIsObjectValid(oTarget)){
   effect e = GetFirstEffect(oTarget); while(GetIsEffectValid(e)){
    if(GetEffectTag(e) == sTag){ RemoveEffect(oTarget, e); }
  e = GetNextEffect(oTarget); }  }
}
////////////////////////////////////////////////////////////////////////////////
